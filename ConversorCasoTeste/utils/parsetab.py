
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND EQUALS GT GTE ID IN LIST LT LTE NOT NUMBER ORexpression :  expression logical expression expression : term term : not termterm : ID binary NUMBERterm : ID IN LISTterm : ID binary IDlogical : ANDlogical : ORbinary : EQUALSbinary : INbinary : GTbinary : GTEbinary : LTbinary : LTEnot : NOT'
    
_lr_action_items = {'ID':([0,3,5,6,7,8,10,11,12,13,14,15,16,],[4,4,-15,4,-7,-8,18,-10,-9,-11,-12,-13,-14,]),'NOT':([0,3,5,6,7,8,],[5,5,-15,5,-7,-8,]),'$end':([1,2,9,17,18,19,20,],[0,-2,-3,-1,-6,-4,-5,]),'AND':([1,2,9,17,18,19,20,],[7,-2,-3,7,-6,-4,-5,]),'OR':([1,2,9,17,18,19,20,],[8,-2,-3,8,-6,-4,-5,]),'IN':([4,],[11,]),'EQUALS':([4,],[12,]),'GT':([4,],[13,]),'GTE':([4,],[14,]),'LT':([4,],[15,]),'LTE':([4,],[16,]),'NUMBER':([10,11,12,13,14,15,16,],[19,-10,-9,-11,-12,-13,-14,]),'LIST':([11,],[20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,6,],[1,17,]),'term':([0,3,6,],[2,9,2,]),'not':([0,3,6,],[3,3,3,]),'logical':([1,17,],[6,6,]),'binary':([4,],[10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression logical expression','expression',3,'p_expression_paren_expression','Parser.py',43),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',47),
  ('term -> not term','term',2,'p_term_not','Parser.py',51),
  ('term -> ID binary NUMBER','term',3,'p_term_number','Parser.py',55),
  ('term -> ID IN LIST','term',3,'p_term_list','Parser.py',59),
  ('term -> ID binary ID','term',3,'p_term_binary','Parser.py',63),
  ('logical -> AND','logical',1,'p_logical_and','Parser.py',67),
  ('logical -> OR','logical',1,'p_logical_or','Parser.py',71),
  ('binary -> EQUALS','binary',1,'p_binary_equals','Parser.py',75),
  ('binary -> IN','binary',1,'p_binary_in','Parser.py',79),
  ('binary -> GT','binary',1,'p_binary_gt','Parser.py',83),
  ('binary -> GTE','binary',1,'p_binary_gte','Parser.py',87),
  ('binary -> LT','binary',1,'p_binary_lt','Parser.py',91),
  ('binary -> LTE','binary',1,'p_binary_lte','Parser.py',95),
  ('not -> NOT','not',1,'p_not','Parser.py',99),
]
